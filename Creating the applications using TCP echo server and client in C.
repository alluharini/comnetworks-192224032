TCP Echo Server

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>

int main() {
    int serverSocket, clientSocket;
    struct sockaddr_in serverAddr, clientAddr;
    socklen_t addrLen = sizeof(clientAddr);
    char buffer[1024];

    // Create socket
    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket == -1) {
        perror("Error creating socket");
        exit(1);
    }

    // Configure server address
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(12345); // Choose any available port
    serverAddr.sin_addr.s_addr = INADDR_ANY;

    // Bind socket
    if (bind(serverSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) == -1) {
        perror("Error binding");
        exit(1);
    }

    // Listen for incoming connections
    if (listen(serverSocket, 5) == -1) {
        perror("Error listening");
        exit(1);
    }

    printf("Echo Server is listening...\n");

    // Accept client connection
    clientSocket = accept(serverSocket, (struct sockaddr *)&clientAddr, &addrLen);
    if (clientSocket == -1) {
        perror("Error accepting connection");
        exit(1);
    }

    while (1) {
        // Receive message from client
        ssize_t bytesRead = recv(clientSocket, buffer, sizeof(buffer), 0);
        if (bytesRead <= 0) {
            break; // Client disconnected or error occurred
        }

        // Send back the received message as an echo
        send(clientSocket, buffer, bytesRead, 0);
    }

    close(clientSocket);
    close(serverSocket);

    return 0;
}

**************************************************************

TCP Echo Client

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>

int main() {
    int clientSocket;
    struct sockaddr_in serverAddr;
    char buffer[1024];

    // Create socket
    clientSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (clientSocket == -1) {
        perror("Error creating socket");
        exit(1);
    }

    // Configure server address
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(12345); // Use the same port as the server
    serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1"); // Server IP address

    // Connect to server
    if (connect(clientSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) == -1) {
        perror("Error connecting to server");
        exit(1);
    }

    while (1) {
        printf("Enter a message: ");
        fgets(buffer, sizeof(buffer), stdin);
        
        // Send message to server
        send(clientSocket, buffer, strlen(buffer), 0);

        // Receive echo from server
        ssize_t bytesRead = recv(clientSocket, buffer, sizeof(buffer), 0);
        if (bytesRead <= 0) {
            break; // Server disconnected or error occurred
        }
        
        // Null-terminate the received data to print it as a string
        buffer[bytesRead] = '\0';
        printf("Server's echo: %s", buffer);
    }

    close(clientSocket);

    return 0;
}

**************************************************************

TCP Echo Server Output:

Echo Server is listening...


*************************

TCP Echo Client Output:

Enter a message: Hello, this is a test message.
Server's echo: Hello, this is a test message.
Enter a message: This is another message.
Server's echo: This is another message.
Enter a message: Bye
Server's echo: Bye

